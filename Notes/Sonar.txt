=================
What is Jenkins?
=================

=> Jenkins is an open source automation tool for CI and CD

=> Jenkins tool developed using Java

=> Jenkins is part of Hudson Project

=> Intially it is called as Hudson then later it renamed to Jenkins

=================
About CI CD
=================

=> CI and CD are two most frequently used terms in modern development practises and DevOps practises.

=> CI stands for Continuous Integration. It is fundamental DevOps best practise where developers frequently merge code changes to central repository where automated builds and tests runs.

=> CD means Continuous Delivery or Continous Deployment.

=> Jenkins is a self-contained, open-source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.

==================================
Build & Deployment Process
==================================

1) Take latest source code from repository

2) Compile source code 

3) Execute Unit tests (Junits)

4) Perform Code Review

5) Package code as war file

6) Deploy the war file into server

Note: All the above build and deployment tasks can be automated using Jenkins tool.


=================
Jenkins Installation:
=================

1) Create an EC2 instance with Ubuntu AMI (t2.micro instance)

2) Connect to your EC2 instance using MobaXterm
 
3) Install Java In Ubuntu VM with below commands

$ sudo apt-get update

$ sudo apt-get install default-jre

4) Install Jenkins in Ubuntu VM with below commands

$ wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -

$ sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'

$ sudo apt-get update

$ sudo apt-get install jenkins

$ sudo systemctl status jenkins
 
5) Access Jenkins Server in browser using below URL

		URL : http://ec2-public-ip:8080/

	Note: Enable 8080 port in security group
 
6) Get the initial administrative password 

	$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword

	pwd : 5fe6ddcc9db244cab6aca5ccf2d6a83a

-> Provide pwd which we have copied to unlock jenkins

-> Select "Install Suggested Plugins" card (it will install those plugins)

-> Create Admin account

=========================
Creating First Job in Jenkins 
=========================

1) Goto Jenkins Dashboard

2) Click on New Item

		-> Enter Item Name (Job Name)
		-> Select Free Style Project & Click OK
		-> Enter some description
		-> Click on 'Build' tab
		-> Click on 'Add Build Step' and select 'Execute Shell'

3) Enter below shellscript

echo "Hello Guys,"
touch ashokit.txt
echo "Hello Guys, Welcome to Jenkins Classes" >> ashokit.txt
echo "Done..!!"

4) Apply and Save

Note: With above steps we have created JENKINS Job

5) Click on 'Build Now' to start Job execution

6) Click on 'Build Number' and then click on 'Console Ouput' to see job execution details.


=> Jenkins Home Directory in EC2 : /var/lib/jenkins/workspace/

		$ cd /var/lib/jenkins/workspace/

7) Go to Jenkins home directory and check for the job name --> check the file created inside the job

===================================================
Jenkins Job with with GIT Hub Repo + Maven - Integeration
===================================================

Pre-Requisites : Java, Maven and Git client

# Git installation In EC2 VM

$ sudo apt install git -y

==================================
Maven Installation In Jenkins: 
==================================

Jenkins Dashboard -> Manage Jenkins --> Global Tools Configuration -> Add maven

==================================
Sample Git Repo URLS For Practise
==================================

Git Hub Repo URL-1  : https://github.com/ashokitschool/JAVA-MAVEN-WEB-APP.git
Git Hub Repo URL-2  : https://github.com/ashokitschool/maven-web-app.git

===================================================
JOB-2 :: Steps To Create Jenkins Job with Git Repo + Maven
===================================================

1) Connect to EC2 instance in which jenkins server got installed

2) Start Jenkins Server

3) Access Jenkins Server Dashboard and Login with your jenkins credentials

4) Create Jenkins Job with Git Hub Repo 

		-> New Item
		-> Enter Item Name (Job Name)
		-> Select 'Free Style Project' & Click OK
		-> Enter some description
		-> Go to "Source Code Management" Tab and Select "Git"
		-> Enter Project "Git Repo URL"
		-> Add Your Github account credentials
		-> Go to "Build tab"
		-> Click on Add Build Step and Select 'Inovke Top Level Maven Targets'
		-> Select Maven and enter goals 'clean package'
		-> Click on Apply and Save

Note: With above steps we have created JENKINS Job

5) Click on 'Build Now' to start Job execution

6) Click on 'Build Number' and then click on 'Console Ouput' to see job execution details.

=> Jenkins Home Directory in EC2 : /var/lib/jenkins/workspace/

=> Go to jenkins workspace and then go to job folder then goto target folder there we see war file created.

-------------------------------------------------------------------------------------------------

=> Access below URL in browser to stop Jenkins Server

		URL : http://EC2-VM-IP:8080/exit/

		(Click on Retry using Post button)

==============================================================
Job-3 :: Steps To Create Jenkins Job with Git Repo + Maven + Tomcat Server
==============================================================

1) Go to Jenkins Dashboard -> Manage Jenkins --> Manage Plugins -> Goto Available Tab -> Search For
   "Deploy To Container" Plugin -> Install without restart.

2) Create Jenkins Job 

		-> New Item
		-> Enter Item Name (Job Name)
		-> Select Free Style Project & Click OK
		-> Enter some description
		-> Go to "Source Code Management" Tab and Select "Git"
		-> Enter Project "Git Repo URL"
		-> Add Your Github account credentials
		-> Go to "Build tab"
		-> Click on Add Build Step and Select 'Inovke Top Level Maven Targets'
		-> Select Maven and enter goals 'clean package'
		-> Click on 'Post Build Action' and Select 'Deploy war/ear to container' option
		-> Give path of war file (You can give like this also : **/*.war )
		-> Enter Context Path (give project name Ex: java_web_app)
		-> Click on 'Add Container' and select Tomcat version 9.x
		-> Add Tomcat server credentials (give the username & pwd which is having manager-script role)
		-> Enter Tomact Server URL (http://ec2-vm-ip:tomcat-server-port)
		-> Click on Apply and Save

4) Run the job now using 'Build Now' option and see see 'Console Output' of job

5) Once Job Executed successfully, go to tomcat server dashboard and see application should be displayed.

6) Click on the applicaton name (it should display our application)

--------------------------------------------------------------------------------------------------------

**** If we forgot Jenkins Password, then how to recover it ? *****

-> Go to /var/lib/jenkins/

	Open  : config.xml file

-> Set Value for useSecurity as false

	ex: <useSecurity>false</useSecurity>

-> Re-start jenkins and try to access


******* How to change Jenkins Port Number ***********

-> Go to root directory

-> Go to /etc/sysconfig 

-> Open jenkins file and change Jenkins port number

-> Restart Jenkins server

===================================================
How to Create Jenkins Jobs with Build Parameters
===================================================

=> Build Parameters are used to supply input to run the Job. Using Build Parameters we can avoid hard coding.

		Ex : We can pass branch name as build parameter.

-> Create New Item
-> Enter Item Name & Select Free Style Project
-> Select "This Project is parameterized" in General Section
-> Select Choice Parameter
-> Name : BranchName
-> Choices : Enter every branch name in nextline
-> Branches to Build : */${BranchName}


==================================
Creating Users in Jenkins
==================================

-> Manage Jenkins -> Manage Users

-> Create Users

-> Configure Global Security For Users

-> Manage Roles & Assign Roles

Note: By default admin role will be available and we can create custom role based on requirement

-> In Role we can configure what that Role assigned user can do in jenkins

-> In Assign Roles we can add users to particular role


=========
Excercise
========

-> create 1 account for DevOps team member 

-> Create 1 account for Development team member

-> Configure Roles for DevOps team member and Development team member


==================================
Jenkins Master and Slave Configuration
==================================
-> When we build the Jenkins job in a single Jenkins master node then Jenkins uses the resource of the base machine and If no executor is available then the jobs are queued in the Jenkins server.

-> Sometimes you might need several different environments to test your builds. This cannot be done by a single Jenkins server. 

-> It is recommended not to run different jobs in the same system that required a different environment. In such scenarios where we need a different machine with a different environment that takes the specific job from the master to build.

-> On the same Jenkins setup, multiple teams are working with their jobs. All jobs are running on the same base operating system and the base operating system has limited resources.

-> To overcome this problem, Jenkins provided Distributed Architecture i.e Jenkins Master Slave Architecture

-> Jenkins uses A Master-Slave architecture to manage distributed builds. The machine where we install Jenkins software will be Jenkins master and that runâ€™s on port 8080 by default. On the slave machine, we install a program called Agent. This agent requires JVM. This agent executes the tasks provided by Jenkins master. We can launch n numbers of agents and we can configure which task will be run on which agent server from Jenkins master by assigning the agent to the task.


==============
Jenkins Master
===============

-> Your main Jenkins server is the Master. The Masterâ€™s job is to handle:

a) Scheduling build jobs.

b) Dispatching builds to the slaves for the actual execution.

c) Monitor the slaves (possibly taking them online and offline as required).

d) Recording and presenting the build results.

e) A Master instance of Jenkins can also execute build jobs directly.

==============
Jenkins Slave
==============
A Slave is a Java executable that runs on a remote machine. Following are the characteristics of Jenkins Slaves:

1) It hears requests from the Jenkins Master instance.

2) Slaves can run on a variety of operating systems.

3) The job of a Slave is to do as they are told to, which involves executing build jobs dispatched by the Master.

4) You can configure a project to always run on a particular Slave machine or a particular type of Slave machine, or simply let Jenkins pick the next available Slave.

===============================================
Working with Jenkins Master Slave Architecture
===============================================

==========================
Step-1 : Create Jenkins Master
==========================

1) Create EC2 instance
2) Connect EC2 using Mobaxterm
3) Install Git client
4) Install Java Software
5) Install jenkins server
6) Add Git, JDK and Maven Plugins
7) Enable Jenkins Port Number in Security Group
8) Access Jenkins Server in Browser and Login

=========================
Step-2 : Create Jenkins Slave
=========================

1) Create EC2 instance
2) Connect to EC2 using Mobaxterm
3) Install Git client
4) Install Java Software
5) Create one directory in /home/ec2-user (ex: slavenode)


===========================================
Step-3: Configure Slave Node in Jenkins Master Node
============================================

1) Go to Jenkins Dashboard
2) Go to Manage Jenkins
3) Go to Manage Nodes & Clouds
4) Click on 'New Node' -> Enter Node Name -> Select Permanent Agent
5) Enter Remote Root Directory ( /home/ec2-user/slavenode )
6) Enter Label name as Slave-1
7) Select Launch Method as 'Launch Agent Via SSH'
8) Give Host as 'Slave VM DNS URL'
9) Add Credentials ( Select Kind as : SSH Username with private key )
10) Enter Username as : ec2-user
11) Select Private Key as Enter Directley and add private key

Note: Open gitbash from your .pem file location and execute below command to get private key from pem file

		$ cat <key-pair-file-name>.pem

Note: It will display private key on Git Bash terminal (Just copy and paste in jenkins)

12) Select Host Key Strategy as 'Manually Trusted Key Verification Strategy'

13) Click on Apply and Save (We can see configure slave)


************************With above steps Master and Slave Configuration Completed***************************

-> Go to Jenkins Server and Create Jenkins Job

Note: Under Generation Section of Job creation process, Select "Restrict Where This Project Can Run" and enter Slave Nodel Label name and finish job creation.


-> Execute the Job using 'Build Now' option

Note: Job will be executed on Slave Node (Go to Job Console Ouput and verify execution details)


=================
JENKINS - Pipeline
=================

-> Jenkins Pipeline is an automation solution that lets you create simple or complex pipelines.

-> Jenkins Pipeline is a combination of Plugins which automates number of tasks and makes the CI/CD pipeline efficient, high in quality and reliable.

-> Jenkins provides two ways of developing a pipeline

1) Scripted
2) Declarative

-> Traditionally, Jenkins jobs were created using Jenkins UI called FreeStyle jobs. 

-> In Jenkins 2.0, Jenkins introduced a new way to create jobs using the technique called pipeline as code. 

-> In pipeline as code technique, jobs are created using a script file that contains the steps to be executed by the job. 

-> In Jenkins, that scripted file is called Jenkinsfile.

=================
What is Jenkinsfile?
==================

-> Jenkinsfile is nothing but a simple text file which is used to write the Jenkins Pipeline and to automate the Continuous Integration process.

-> Jenkinsfile usually checked in along with the projectâ€™s source code in Git repo. Ideally, every application will have its own Jenkinsfile.

-> Jenkinsfile can be written in two ways â€“ 

1) Scripted pipeline syntax
2) Declarative pipeline syntax

=============================
What is Jenkins Scripted Pipeline?
=============================

-> Jenkins pipelines are traditionally written as scripted pipelines. Ideally, the scripted pipeline is stored in Jenkins webUI as a Jenkins file. The end-to-end scripted pipeline script is written in Groovy.

-> It requires knowledge of Groovy programming as a prerequisite. Jenkinsfile starts with the word node. Can contain standard programming constructs like if-else block, try-catch block, etc.

++++++++++++++++++++++++++
Sample Scripted Pipeline
++++++++++++++++++++++++++
node {
    stage('Stage 1') {
        echo 'hello'
    }
}

===============================
What is Jenkins Declarative Pipeline?
===============================

-> The Declarative Pipeline subsystem in Jenkins Pipeline is relatively new, and provides a simplified, opinionated syntax on top of the Pipeline subsystems.

-> The latest addition in Jenkins pipeline job creation technique.

-> Jenkins declarative pipeline needs to use the predefined constructs to create pipelines. Hence, it is not flexible as a scripted pipeline.

-> Jenkinsfile starts with the word pipeline.

-> Jenkins declarative pipeline should be the preferred way to create a Jenkins job as they offer a rich set of features, come with less learning curve & no prerequisite to learn a programming language like Groovy just for the sake of writing pipeline code.

-> We can also validate the syntax of the Declarative pipeline code before running the job. It helps to avoid a lot of runtime issues with the build script.

=========================
Our First Declarative Pipeline
=========================

pipeline {
    agent any
    stages {
        stage('Welcome Step') {
            steps { 
                echo 'Welcome to Jenkins Scripting'
            }
        }
    }
}

pipeline : Entire Declarative pipeline script should be written inside the pipeline block. Itâ€™s a mandatory block.

agent : Specify where the Jenkins build job should run. agent can be at pipeline level or stage level. Itâ€™s mandatory to define an agent.

stages : stages block constitutes different executable stage blocks. At least one stage block is mandatory inside stages block.

stage : stage block contains the actual execution steps. Stage block has to be defined within stages block. Itâ€™s mandatory to have at least one stage block inside the stage block. Also its mandatory to name each stage block & this name will be shown in the Stage View after we run the job.

steps : steps block contains the actual build step. Itâ€™s mandatory to have at least one step block inside a stage block.

Depending on the Agentâ€™s operating system (where Jenkins job runs), we can use shell, bat, etc., inside the steps command.



==================
Build Pipeline Script
==================
pipeline{
    agent any
    environment {
        PATH = "$PATH:/opt/apache-maven-3.6.3/bin"
    }
    stages{
	stage('GetCode'){
            steps{
		git branch: 'main',
                url: 'https://github.com/ashokitschool/maven_web_app_jenkins_pipeline.git'
            }
         }        
	stage('Build'){
            steps {
                sh 'mvn clean package'
            }
        }       
    }
}
====================================
Build Pipeline + Sonar Qube Server - Script
====================================

pipeline{
    agent any
    environment {
        PATH = "$PATH:/opt/apache-maven-3.6.3/bin"
    }
    stages{
       stage('GetCode'){
            steps{
                git 'https://github.com/ashokitschool/maven-web-app.git'
            }
         }        
       stage('Build'){
            steps{
                sh 'mvn clean package'
            }
         }
        stage('SonarQube analysis') {
            steps{
                withSonarQubeEnv('Sonar-Server-7.8') {
                    sh "mvn sonar:sonar"
                }
            }
        }
       
    }
}

============================================================
JENKINS PIPELINE ( JENKINS + MAVEN + GIT HUB + SONAR + TOMCAT )
=============================================================

Note: Install 'ssh-agent' plugin and generate code using pipeline syntax

pipeline{
    agent any
    environment {
        PATH = "$PATH:/opt/apache-maven-3.6.3/bin"
    }
    stages{
       stage('GetCode'){
            steps{
                git 'https://github.com/ashokitschool/maven-web-app.git'
            }
         }        
       stage('Build'){
            steps{
                sh 'mvn clean package'
            }
         }
        stage('SonarQube Analysis') {
            steps{
                withSonarQubeEnv('Sonar-Server-7.8') {
                    sh "mvn sonar:sonar"
                }
            }
        }
		stage('Code deploy') {
            steps{
				sshagent(['Tomcat-Server-Agent']) {
				  sh 'scp -o StrictHostKeyChecking=no target/01-maven-web-app.war ec2-user@13.235.68.29:/home/ec2-user/apache-tomcat-9.0.63/webapps'
				}
            }
        }
    }
}
=========================
Email Notifications In Jenkins
=========================

-> We can configure Email notifications in Jenkins

-> With this option we can send email notification to team members after jenkins job execution completed

-> We need to configure SMTP properties to send emails

-> Go To Manage Jenkins
-> Add Email Extension Server
-> We will add company provided SMTP server details

Note: For practise we can use GMAIL SMTP Properties

-> Once SMTP properties added then we can configure email notification as 'Post Build Action' in Jenkins job

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

pipeline {
    agent any
    stages {
        stage('Hello') {
            steps {
                echo "Hello world"
                    }
            }
        }
    post{
        always{
            mail to: "ashokitschool@gmail.com",
            subject: "Test Email",
            body: "Test"
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

































============
Sonar Qube
============

-> Sonar Qube is Continuous Code Quality Checking Tool

-> We can do Code Review using Sonar Qube tool


====================================
What is Code Coverage & Code Review 
====================================

Code Coverage : How many lines of source code is tested by unit test cases

Note: Industry standard Code Coverage is 80 %

Code Review : Checking Coding Conventions / Standards


-> Sonar Qube is an open source, software quality management tool

-> It will continuosly analyze and measures quality of the source code

-> It will generate code review report in html format / pdf format 

-> It is a web based tool and it supports 29 Programming Languages

-> It will support multi OS platform

-> It will support multiple databases (MySQL, Oracle, SQL Server, PostGres SQL...)

-> It supports multiple browsers

-> Sonar Qube will identify below category of issues in project source code 

1) Duplicate Code
2) Coding Standards
3) Unit Tests
4) Code Coverage
4) Complex Code
5) Commented Code
6) Potential Bugs


=> Initially Sonar Qube was developed only for Java Projects

=> Today Sonar Qube is supporting for 29 Languages


================
Environment Setup
================

-> Java is the pre-requisite software 

7.6 --> Java 1.8v

7.8 - 8.x --> Java 11v

Note: We can check this compatability in official sonar website

=====================
Hardware Requirements
=====================

Minimum RAM : 2 GB

t2.medium ---> 4 GB RAM

		
-> Create EC2 instance with 4 GB RAM (t2.medium)   (Amazon Linux AMI)

-> Connect with EC2 instance using MobaXterm

-> check space (free -h)

$ sudo su
$ cd /opt
$ sudo yum install java-1.8.0-openjdk
$ java -version
$ wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip
$ unzip sonarqube-7.8.zip

*********************************** Note: SonarQube server will not run with root user ***********************************

-> Create new user in ec2 instance
$ useradd sonar
$ visudo

-> Configure sonar user without pwd in suderos file
sonar ALL=(ALL) NOPASSWD: ALL

# Change ownership for sonar folder/directory
$ chown -R sonar:sonar /opt/sonarqube-7.8/
$ chmod -R 775 /opt/sonarqube-7.8
$ su - sonar

-> Goto bin directory then goto linux directory and run sonar server 

$ cd /opt/sonarqube-7.8/bin/linux-x86-64

$ sh sonar.sh start

-> Check sonar server status 

$ sh sonar.sh status

Note: Sonar Server runs on 9000 port number by default


Note: We can change default port of sonar server ( conf/sonar.properties)

Ex:   sonar.web.port=6000


-> Enable port number in EC2 VM - Security Group

-> Access Sonar Server in Browser 

		URL : http://EC2-VM-IP:9000/

-> Default Credentials of Sonar User is admin & admin 

-> After login, we can go to Security and we can enable Force Authentication.

Note: Once your work got completed then stop your EC2 instance because we have t2.medium so bill be generated.

$ sh sonar.sh status 

Note: If sonar not started, then go to log file and see 

$ sudo rum -rf /opt/sonar-folder/temp/

$ cd ../bin/

$ sh sonar.sh start

$ sh sonar.sh status

-> Access sonar server in browser and login into that


=====================================
Integrate Sonar server with Java Maven App
======================================

-> Clone git repository : https://github.com/ashokitschool/SB-REST-H2-DB-APP

-> Configure Sonar Properties under <properties/> tag in "pom.xml"

  <properties>
	<sonar.host.url>http://ec2-public-ip:9000/</sonar.host.url>
	<sonar.login>admin</sonar.login>
	<sonar.password>admin</sonar.password>
  </properties>
	
-> Go to project pom.xml file location and execute below goal

			$ mvn sonar:sonar

-> After build success, goto sonar dashboard and verify that 

Note: Instead of username and pwd we can configure sonar token in pom.xml


=======================
Working with Sonar Token
=======================
-> Goto Sonar -> Login -> Click on profile -> My Account -> Security -> Generate Token 

-> Copy the token and configure that token in pom.xml file like below
	
	<sonar.host.url>http://3.110.114.186:9000/</sonar.host.url>
	<sonar.login>ff4d464eda3eccdea05d77b742767c777545863e</sonar.login>

-> Then build the project using "mvn sonar:sonar" goal



==============
Quality Profile
==============

-> For each programming language sonar qube provided one quality profile with set of rules

-> Quality Profile means set of rules to perform code review

-> We can create our own quality profile based on project requirement

-> Create One Quality Profile

			- Name : SBI_Project
			- Language: Java
			- Parent : None

Note: We can make our quality profile as default one then it will be applicable for all the projects which gets reviewed under this sonar server.

Note: If we have any common ruleset for all projects then we can create one quality profile and we can use that as parent quality profile for other projects.

-> We can configure quality profile to specific project

			- click on project name
			- Go to administration
			- Click on quality profile
			- Select profile required

==============
Quality Gate
==============

-> Quality Gate represents set of metrics to identify project quality is Passed or Failed

-> Every Project Quality Gate should be passed

-> In Sonar We have default Quality Gate

-> If required, we can create our own Quality Gate also


Note: If project quality gate is failed then we should not accept that code for deployment.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-> If project is having Sonar issues then development team is responsible to fix those issues

-> As a DevOps engineer, we will perform Code Review and we will send Code Review report to Development team (we will send sonar server URL to development team)

=================================
Sonar Server with Jenkins Integration
=================================

Pre-Requisites
================
1) Sonar Qube Server
2) Jenkins Server

=> On SonarQube Server Generate a Token

=> On Jenkins Server 
		- install apache maven
		- Install Sonar Plugin
		- Configure SonarServer with Token
		- Install Sonar Scanner
		- Run Jenkins Pipeline Job




-> Connect to Jenkins server VM using mobaxterm and start sonar server

-> Access Sonar Server in browser & generate token

-> Connect to  Jenkins Server using MobaXterm

-> Execute below commands in Jenkins Server VM

$ sudo su
$ cd /opt
$ wget https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
$ tar -xvf apache-maven-3.6.3-bin.tar.gz


-> Manage Jenkins -> Plugins -> Available -> Sonar Qube Scanner Plugin -> Install it 

-> Manage Jenkins -> Configure System -> Sonar Qube Servers -> Add Sonar Qube Server 
		
				- Name : Sonar-Server-7.8
				- Server URL : http://52.66.247.11:9000/   (Give your sonar server url here)
				- Add Sonar Server Token			

				(Token we should add as secret text)

				(Save it)

-> Goto jenkins dashboard -> click on 'New Item -> Enter Item name -> Select Pipeline ->  Click on Next

-> Enter below pipeline script in given text box

pipeline{
    agent any
    environment {
        PATH = "$PATH:/opt/apache-maven-3.6.3/bin"
    }
    stages{
       stage('GetCode'){
            steps{
                git ''https://github.com/ashokitschool/maven-web-app.git"
            }
         }        
       stage('Build'){
            steps{
                sh 'mvn clean package'
            }
         }
        stage('SonarQube analysis') {
        steps{
        	withSonarQubeEnv('Sonar-Server-7.8') {
       		sh "mvn sonar:sonar"
    		}
        }
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

