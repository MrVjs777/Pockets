=======================
VPC : Virtual Private Cloud
======================

-> We are creating Virtual Machines in AWS to setup our infrastructure

-> In order to create Virtual Machine mainley we will use 3 services

1) EC2 (Elastic Compute Cloud)
2) EBS (Elastic Block Storage)
3) VPC (Virtual Private Cloud)

Note: Without using these services we can't launch Virtual VM

-> In AWS we have total 200+ Services

-> Those 200 services we can categorize them into 2 types

1) AWS Managed Services (SaaS)
2) Customer Managed Services (IaaS & PaaS)

Note: VPC is one of the customer managed service in AWS

Example
------------
Take a 2 BHK flat
(Land, House (BR-1, BR-2, Kitchen, Hall))

Land Gate (To enter into our land)
Hall Gate (To enter into our house)
Kitchen Gate, BR-1 gate and BR-2 gate

-> Consider VPC also like above house 

-> For every room seperate door (In VPC seperate network (Subnets) )

-> We need main gate to enter into house (In VPC we will use Internet Gateway)

-> To enter into hall we will use hall gate (In VPC we will use Routing Table)

-> People will come into our house and sit in hall for discussion then they will leave
    (we will be monitoring manually)

Note: To avoid public access we will keep our components in private subnets

(Webservers, Appservers, DB Servers)

-> Public subnet means Internet connection will be there

-> Private subnet means no internet connection

-> If our components are in private subnet then how to take code or update code ?

Note: NAT gateway comes into picture (it will be created in public subnet)

-> Our public and private subnets will be connected to NAT Gateway

=================================================================
Q) What is the difference between Ineternet Gateway and NATGateway ?
=================================================================
-> IG will have both incoming and outgoing

-> Nategateway will have only outgoing

Note: Outside ppl can't access NAT Gateway

VPC
Subnets (private & public)
Internet Gateway (Ingres & Agress)
Route Table (Connections to Subnets)
NAT Gateways (no incoming only outgoing)


###########################
Then how to provide security ?
###########################

-> In houses manually we will be monitoring who is entering into our house and who is entering into rooms

-> In VPC we have to configure security rules

-> In VPC to provide security we have 2 options

1) Security Group
2) NACL (N/W Access Control List)

Note: Who can access which subnet we will configure in NACL

-> Every subnet will have its own NACL (both private and public)
-> NACL will work at subnet level

-> Security group is used to open ports and who can access those ports
-> Security groups works at resource level

-> If we want to apply same rule for multiple resources then we will go for security group and will add that for all resources

-> If we want to apply security policy for entire subnet then we will use NACL


-> In security group we can only allow the traffic
-> In NACL we can do both allow and deny the traffic

Note : For our aprtment we will have security to notedown incoming and outgoing ppl/vehicles recrods

-> If we want same functionality for our VPC then we can use VPC FLOW Logs
-> VPC Flow Logs will track incoming and outgoing traffic of our VPC
-> By default VPC is disabled (we can enable)

Note: Check default VPC configurations Route Tables and NACL

-------------------------------------------------------------------------------------------------------

-> To construct house we will take land measurements (length & width)

-> How to take measurements in VPC Networking ?

-> We will do VPC sizing based on IPS

Example
--------
If we take 100 ip's then in VPC we will allocate those 100 ip's to 2 subnets

Subnet-1 : 50 ips 
Subnet-2 : 50 ips

-> All my 100 ips got completed. In future if i get new requirement i m running out of ips

-> To overcome these problems we don't allocate all ips to subnets 
   (we will allocate few ips and will keep few ips in reserve mode)

-> Before entering into ip sizing lets understand IPs first

Note: We can create VPC is very easily but we will get multiple errors while creating subnets and ip allocation.

Note: there are several websites will help us in ip division

-> Lets understand ips

-> I have 2 subnets connected with LAN

				private ip
	subnet-1 <-----------------------> subnet-2
	
-> If 2 systems not connected with LAN then we should go for public ip	


			         public ip
	System-1 <-----------------------> System-2


-> IPs are divided into 2 types 

1) IPV4
2) IPV6

Note: Earlier we have only IPV4 

-> In IPV4 we have 5 classes
	(A, B, C, D, E)
	
Note: Class E is reserved for researching purpose

-> IP ranges we will do with CIDR

-> CIDR stands for Class less inter domain range

Note: These CIDR classes are required for only public ips and not required for private ips

-> Daily billions of new devices launching and they are using internet 

-> If a device wants to use internet then ip is mandatory (we are running out of ips)

-> To overcome this 1PV4 problem IPV6 came into picture


IPV4
++++
10 . 0 . 0 . 1
32-Bits
We have 4 parts here
Every part is called as one octect
In every octect we have 8 bits
4 parts * 8 bits = 32 bits

IPV6
++++
10.4.1 -  -  -  
128 bits
We have 8 parts
In evary part we have 16 bits
8 parts * 16 bits = 128 bits

==================
IP ranges in IPV4
==================
-> IP ranges will be calculated in 2 power

-> If we give range as /16

10.0.0.1/16 = > 2 power (32-16) => 2 Power 16 => 65536
10.0.0.1/32 = > 2 power (32-32) => 2 Power 0  => 1
10.0.0.1/31 = > 2 power (32-31) => 2 Power 1  => 2
10.0.0.1/30 = > 2 power (32-30) => 2 Power 2  => 4
10.0.0.1/29 = > 2 power (32-29) => 2 Power 3  => 8
10.0.0.1/28 = > 2 power (32-28) => 2 Power 4  => 16 (AWS supports from /28)

=> /29  to /32 AWS won't support

-> We can start giving subnet ranges from /16 to /28

-> Recommended to use /24 

	10.0.0.1/24 = > 2 power (32-24) => 2 Power 8 => 256

Note: /24 we will get 256 IPs those are sufficient for our usecases in realtime


#################
VPC Lab Task
#################

-> Create a VPC

-> CIDR Block : 10.0.0.0/16

-> Select No IPV6 CIDR blok

-> Select Default Tenancy

-> Create VPC

Note: After creating VPC verify its details

(DNS hostnames -> Disabled)

#############
Create Subnets
################

Note:  By default 3 subnets will be available under default vpc

-----------------------
Create Subnet-1
----------------------
-> Create Subnet

   Name : public-subnet-az-1

-> select availability zone as 1a

-> CIDR Block : 10.0.0.0/24  (It will take 256 ips)   

------------------------
Create Subnet-2
-------------------------
-> Create Subnet

   Name : private-subnet-az-1b

-> select availability zone as 1b

-> CIDR Block : 10.0.1.0/24  (It will take 256 ips)  


Note: Every subnet will have Route Table and NACL

-> AWS will reserve 5 ips in every subnet (we will get only 251)

---------------------------------
Create Internet gateway
---------------------------------
Note: By default one IGW will be available and it will be attached to default VPC

-> Create custom Internet Gateway (ashokit-vpc-igw)

-> Attach this IGW to VPC (we can attach IGW to only one VPC)

----------------------------
Create Route Table
----------------------------

Note: When we create VPC, we will get only route table by default. It is called as Main route table. 

Note : Change existing route table name  'ashokit-vpc-private-rt'

-> Create one new Route Table (ashokit-vpc-public-rt)
-> Choose vpc and create it

Now We have 2 route tables

-> Goto route table and attach route tables to subnets  (Subnets association for Route Tables)

Private Route Table should have Private Subnet
Public Route Table should have Public Subnet


++++++++++++++++++++++
Making Subnet as public
++++++++++++++++++++++

-> Goto public Route Table -> Edit Routes

-> Add Destination as 0.0.0.0/0 and Target as IGW -> Save

-> Subnet Associations -> Edit SNET -> Select Public Subnet

------------------------------------
Create EC2 (Public EC2)
--------------------------------------
-> Choose AMI
-> Select VPC
-> Select Public Subnet
-> Assign Public IP as Enable
-> Add SSH and Http Protocols
-> Download KeyPair
-> Launch Instance

Note: Goto VPC and Enable DNS Host Enable

-------------------------------------
Create EC2 (Private EC2)
--------------------------------------
-> Choose AMI
-> Select VPC
-> Select Private Subnet
-> Assign Public IP as Enable
-> Add SSH (source : custom, Range : 10.0.0.0/16)
-> Download KeyPair
-> Launch Instance

====================
Test EC2 Connections
====================

-> Connect to Public EC2 using MobaXterm (It should allow to connect)

-> Connect to Private EC2 using MobaXterm (It shouldn't allow to connect)


==========================================================
Connect with 'private-ec2' from 'public-ec2' using 'ssh' connection
==========================================================

Note: As both Ec2 instances are available under same VPC, we should be able to one machine from another machine.

------------------------------
Procedure to access
------------------------------

-> Upload pem file into public-ec2 machine (in mobaxterm we have upload option)

-> Execute  below command to provide permission to access pem file

		$ chmod 400 <pem-file-name>

-> Execute below command to make ssh connection from public-ec2 to private-ec2

		$ ssh -i "pem-file-name"  ec2-user@private-ec2-vm-private-ip

Note: It should establish connection (this is internal connection)			

-> Try to ping google from private ec2 (it should not allow because igw is not available)


=============================
VPC with NAT Gateway Lab Task
=============================


1) Create NAT gateway in public subnet 

2) Add NAT gateway in 'private-subnet-routute-table'

3) After NAT Gateway, we should be able to ping google from 'private-ec2' also

===================================================

Note: Delete Elastic IP and NAT Gateway after practise

===================================================



=======================
What  is VPC Peering
=======================

VPC Peering: IPV4 or IPV6 traffic routes between VPCs created to establish communication between one or more multiple VPCs.

=======================
AWS definition: 
=======================
=> â€œA VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them using private IPv4 addresses or IPv6 addresses.

=>  Instances in either VPC can communicate with each other as if they are within the same network. â€œ

1) Through VPC Peering, traffic stays within the AWS network and not go over the internet.

2) Non-overlapping CIDRs â€“ The 2 VPCs you are trying to peer, must have a mutually exclusive set of IP ranges.

3) Transitive VPC Peering â€“ not allowed i.e

(If VPC A & B have peered and VPC A & C have peered, VPC B & C cannot share contents until there is an exclusive peering done between VPC B & C)

=======================
Will VPC Peering Cost me?
=======================
No. VPC itself wonâ€™t cost you, however, the resources deployed inside the VPC and data transfers are done will cost you.

==============================================
Letâ€™s create VPC Peering to enable communication
==============================================

To establish the connection, lets create VPC peering

=> On the left navigation panel under VPC -> Peering Connections:

VPC (Requester) = ashokit_aws_custom_vpc

VPC (Accepter) = default_vpc

=> Now you would see the status Pending Acceptance which means, Requestor has sent a request to the peer now target VPC needs to accept the request.

=> Go to VPC Peering -> Click on Actions -> Accept Request

=> Now we need to make entries in Route Tables

Now navigate to Route Tables, in Default VPC RT(Route Table) -> Edit routes

##########  Default VPC Route Table should have 3 routes #########
(Local + all traffic with IGW + ashokit_aws_custom_vpc IP Range)

172.31.0.0/16 - local
0.0.0.0/0 - Internet-gateway
10.0.0.0/16 - vpc peering  (We need to add this)

########### Custom VPC Route Table should have 3 routes #########
(Local + All traffic with IGW + Default VPC IP Range)

10.0.0.0/16 - local
0.0.0.0/0 - Internet-gateway
172.31.0.0/16 - vpc  (We need to add this)

########### Allow Traffic in VPC Security Groups ###########

Edit Security Group of Default and Custom VPC to allow traffic from each other

Default VPC Security Group looks like
SSH - 22 - all 
HTTP - 80 - all 

Custom VPC Security Group would look like
SSH - 22 - all 
HTTP - 80 - all 

############ Create EC2 instance under Customer VPC with below user data script ###########

sudo yum update -y
sudo yum install -y httpd.x86_64
sudo  systemctl start httpd.service
sudo  systemctl enable httpd.service
echo "Hello world from $(hostname -f)" > /var/www/html/index.html

############ Create EC2 instance under Default VPC with below user data script ###########

sudo yum update -y
sudo yum install -y httpd.x86_64
sudo  systemctl start httpd.service
sudo  systemctl enable httpd.service
echo "Hello world from $(hostname -f)" > /var/www/html/index.html


==========================Test VPC Peering Connectivity ==========================

# Access Webserver that is available in Custom VPC from Default-vpc-ec2-instance with below command
$ curl <private-ip>

Note: We should get response

# Access Webserver that is available in Default VPC from Custom-vpc-ec2-instance with below command
$ curl <private-ip>

Note: We should get response


======================================================
Q ) What is the difference between NACL and Security Groups ?
======================================================

================
Security Group
================

-> Security Group acts as a Firewall to secure our EC2 instances

-> Security Group contains Inbound Rules & Outbound Rules

			inbound rules ---> incoming traffic
			outbound rules ---> outgoing traffic
	
-> In One security group we can add 50 Rules

-> Security Group supports only Allow rules (by default all rules are denied)

-> We can't configure deny rule in security group

		Ex : 172.32.31.90 ----> don't accept request from this IP (we can't do this in SG)

-> Security Groups are applicable at the instance level (manually we have to attach SG to instance)

-> Multiple Security Groups can be attached to single instance & one instance can have 5 security groups

-> Security Groups are statefull 
	(Any changes applied to incoming rules then those changes will be applicable for Outgoing Rules also)

-> In Security Group we can configure Rule destination as CIDR and IP

->  Security Group acts as First Level of defense for Outgoing traffic

======
NACL
======

-> NACL stands for Network Access Control List

-> NACL acts as a firewall for our Subnets in VPC

-> NACL applicable at the subnet level

-> NACL rules are applicable for all the resources which are part of that Subnet

-> NACL rules are stateless 
		(any changes applied to incoming rules will not be applicable for outgoing rules, we need to do that manually)

-> In NACL we can configure both Allow & Deny rules

	Ex: We can block particual IP address (192.168.2.4) to connect with EC2 instance

-> One subnet can have only one NACL

	Note: One NACL can be added to multiple subnets

-> NACL supports rule destination as only CIDR

-> NACL acts as first level of Defense for Incoming Traffic ( Security Group acts as First Level of defense for Outgoing traffic )


================================================================================================






		   













